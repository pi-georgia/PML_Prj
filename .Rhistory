trda<-read.csv("pml-training.csv")
getwd()
setwd("~/Documents/data science/practical machine learning/PML_Prj")
trda<-read.csv("pml-training.csv")
str(trda)
trains<-createDataPartition(y=trda$classe, p=0.7, list=FALSE)
trainsa<-trda[trains,]
testsa<-trda[-trains,]
library(caret)
trains<-createDataPartition(y=trda$classe, p=0.7, list=FALSE)
trainsa<-trda[trains,]
testsa<-trda[-trains,]
str(trainsa)
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
trainsa<-nt[,8:93]
nt<-trainsa[sapply(trainsa, function(trainsa) any(is.numeric(trainsa)))]
str(nt)
trda<-read.csv("pml-training.csv")
trains<-createDataPartition(y=trda$classe, p=0.7, list=FALSE)
trainsa<-trda[trains,]
testsa<-trda[-trains,]
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
ntt<-c(trainsa$classe, nt[,8:93])
str(ntt)
str(trainsa)
str(trda)
str(trainsa$calsse)
str(trainsa$classe)
str(nt$calsse)
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
str(nt$classe)
str(nt)
ntt<-nt[,8:93]
ft<-ntt[sapply(ntt, function(ntt) any(is.numeric(ntt)))]
str(ft)
rffit<-train(ntt$y~., data=ft, method="rf")
rffit<-train(ntt$classe ~., data=ft, method="rf")
install.packages("e1071")
?Createdatapartition
?createDataPartition
rffit<-train(ntt$classe~., data=ft, method="rf")
M<-abs(cor(nt[]))
M<-abs(cor(ntt[]))
M<-abs(cor(ft[]))
rffit<-train(ntt$classe~., data=ft, method="rpart")
varImp(rffit)
str(trainf)
M<-abs(cor(ft[]))
diag(M)<-0
index<-which(M>0.9, arr.ind=T)
ntrain<-trainsa[, index[,1]]
trainf<-data.frame(ntrain, trainsa$classe)
str(trainf)
varImp(rffit)
print(rffit$FinalModel)
print(rffit$finalModel)
plot(rffit$finalModel)
text(rffit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
gwhat<-predict(rffit,testsa)
what
gwhat
str(testsa)
str(gwhat)
correct<- gwhat==testsa$classe
table(gwhat, testsa$classe)
annova
install.packages("annova")
?createDataPartition
trains<-createDataPartition(y=trda$classe, p=0.6, list=FALSE)
trainsa<-trda[trains,]
testsa<-trda[-trains,]
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
#either
ntt<-nt[,8:93]
#or
ft<-ntt[sapply(ntt, function(ntt) any(is.numeric(ntt)))]
rpfit<-train(ntt$classe~., data=ft, method="rpart")
plot(rpfit$finalModel)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
gwhat<-predict(rpfit,testsa)
table(gwhat, testsa$classe)
summary(rpfit)
rpfit$rmse
rpfit$error
str(rpfit)
rpfit$results
varImp(rpfit)
predictors(rpfit)
results(rpfit)
rpfit$results
ft$classe<-trainsa$classe
trCVi<-createDataPartition(y=ft$classe, p=0.7, list=FALSE)
trCV<-trda[trCVi,]
tsCV<-trda[-trCVi,]
rpfit<-train(trCV$classe~., data=trCV, method="rpart")
M<-abs(cor(ftpure[]))
diag(M)<-0
index<-which(M>0.9, arr.ind=T)
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
ft<-ntt[sapply(ntt, function(ntt) any(is.numeric(ntt)))]
ftpure<-ft
ft$classe<-trainsa$classe
M<-abs(cor(ftpure[]))
diag(M)<-0
index<-which(M>0.9, arr.ind=T)
new_ft<-ftpure[, index[,1]]
str(new_ft)
new_ft$classe<-ft$classe
trCVi<-createDataPartition(y=new_ft$classe, p=0.7, list=FALSE)
trCV<-trda[trCVi,]
tsCV<-trda[-trCVi,]
trCV<-new_ft[trCVi,]
tsCV<-new_ft[-trCVi,]
rpfit<-train(trCV$classe~., data=trCV, method="rpart")
plot(rpfit$finalModel)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
varImp(rpfit)
rpfit$results
trCVi<-createDataPartition(y=new_ft$classe, p=0.8, list=FALSE)
trCV<-new_ft[trCVi,]
tsCV<-new_ft[-trCVi,]
rpfit<-train(trCV$classe~., data=trCV, method="rpart")
plot(rpfit$finalModel)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
rpfit<-train(trCV$classe~., data=trCV, method="rf")
M<-abs(cor(ft[]))
diag(M)<-0
index<-which(M>0.75, arr.ind=T)
M<-abs(cor(ftpure[]))
diag(M)<-0
index<-which(M>0.75, arr.ind=T)
new_ft<-ftpure[, index[,1]]
new_ft$classe<-ft$classe
str(new_ft)
trCVi<-createDataPartition(y=new_ft$classe, p=0.8, list=FALSE)
trCV<-new_ft[trCVi,]
tsCV<-new_ft[-trCVi,]
rpfit<-train(trCV$classe~., data=trCV, method="rpart")
plot(rpfit$finalModel)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
varImp(rpfit)
rpfit$results
trCVi<-createDataPartition(y=ft$classe, p=0.8, list=FALSE)
trCV<-ft[trCVi,]
tsCV<-ft[-trCVi,]
str(trCV)
str(ft)
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
ft<-ntt[sapply(ntt, function(ntt) any(is.numeric(ntt)))]
ftpure<-ft
ft$classe<-trainsa$classe
str(ft)
trCVi<-createDataPartition(y=ft$classe, p=0.8, list=FALSE)
trCV<-ft[trCVi,]
tsCV<-ft[-trCVi,]
M<-abs(cor(ftpure[]))
diag(M)<-0
index<-which(M>0.75, arr.ind=T)
new_ft<-ftpure[, index[,1]]
new_ft$classe<-ft$classe
str(new_ft)
rpfit<-train(trCV$classe~., data=trCV, method="rpart")
plot(rpfit$finalModel)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
rpfit$results
varImpt(rpfit)
plot(rpfit$finalModel)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
rpfit$results
varImp(rpfit)
trCVi<-createDataPartition(y=ft$classe, p=0.2, list=FALSE)
trCV<-ft[-trCVi,]
tsCV<-ft[trCVi,]
rpfit<-train(trCV$classe~., data=trCV, method="rpart")
plot(rpfit$finalModel)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
rpfit$results
varImpt(rpfit)
gwhat<-predict(rpfit,tsCV)
text(rpfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
correct<- gwhat==testsa$classe
table(gwhat, tsCV$classe)
adafit<-train(trCV$classe~., data=trCV, method="ada")
adafit$results
gbmfit<-train(trCV$classe~., data=trCV, method="gbm", verbose=FALSE)
str(gbmfit)
gbmfit$results
plot(gbmfit$finalModel)
text(gbmfit$finalModel,use.n=TRUE, all=TRUE, cex=0.8 )
prepart<-predict(rpfit,tsCV)
preboost<-predict(gbmfit, tsCV)
correctpart <- prepart==tsCV$classe
correctgbm <- pregbm==tsCV$classe
correctgbm <- preboost==tsCV$classe
str(correctpart)
table(correctpart, tsCV$classe)
table(correctgbm, tsCV$classe)
qplot(prepart, tsCV$classe)
qplot(preboost, tsCV$classe)
gbmfit$predictors
summary(gbmfit)
summary(gbmfit)
table(correctpart, tsCV$classe)
table(correctgbm, tsCV$classe)
errb1<- table(correctpart, tsCV$classe)
errb2<- table(correctgbm, tsCV$classe)
errb1[1,1]
for i in 1: 5
{err1<- err1+ (errb1[i,i]/(errb1[i,i]+errb1[i+1,i]))}
err1<-0
for i in 1: 5
{err1<- err1+ (errb1[i,i]/(errb1[i,i]+errb1[i+1,i]))}
i<-0
for i in 1: 5
{err1<- err1+ (errb1[i,i]/(errb1[i,i]+errb1[i+1,i]))}
?for
)
for (i in 1: 5 )
{err1<- err1+ (errb1[i,i]/(errb1[i,i]+errb1[i+1,i]))}
errb1[2,1]
for (i in 1: 5 )
{err1<- err1+ (errb1[1,i]/(errb1[1,i]+errb1[2,i]))}
er1
err1
err1<-0
err1
err1<-0
for (i in 1: 5 )
{err1<- err1+ (errb1[1,i]/(errb1[1,i]+errb1[2,i]))}
err1
errb2<- table(correctgbm, tsCV$classe)
err2<-0
for (i in 1: 5 )
{err2<- err2+ (errb2[1,i]/(errb2[1,i]+errb2[2,i]))}
errorgbm<-sqrt(err2)
errobgm
errorbgm
errorgbm
erropart
errorpart
errorpart<-sqrt(err1)
errorpart
err1<-0 ;dia1<- 0 ; for (i in 1: 5 ) {err1<- err1+(errb1[1,i]*(errb1[1,i]; dia1<- dia1+ (errb1[1,i]+errb1[2,i]))}
errorpart<-sqrt(err1/dia1)
errorpart
err1<-0 ;dia1<- 0
for (i in 1: 5 ){
err1<- err1+(errb1[1,i]*(errb1[1,i]
dia1<- dia1+ (errb1[1,i]+errb1[2,i])}
errorpart<-sqrt(err1/dia1)
errorpart
err1<-0 ;dia1<- 0
for (i in 1: 5 ){
err1<- err1+(errb1[1,i]*(errb1[1,i]);dia1<- dia1+ (errb1[1,i]+errb1[2,i])}
errorpart<-sqrt(err1/dia1)
for (i in 1: 5 ){
err1<- err1+(errb1[1,i]*(errb1[1,i])
dia1<- dia1+ (errb1[1,i]+errb1[2,i])}
for (i in 1: 5 ){
err1<- err1+(errb1[1,i]*errb1[1,i])
dia1<- dia1+ errb1[1,i]+errb1[2,i]
}
errorpart<-sqrt(err1/dia1)
errorpart
errb2<- table(correctgbm, tsCV$classe)
err2<-0 ;dia2<- 0
for (i in 1: 5 ){err2<- err2+(errb2[1,i]*errb2[1,i]) ; dia2<- dia2+ errb2[1,i]+errb2[2,i]}
RMSE2<-sqrt(err2/dia2)
RMSE2
gwhat<-predict(preboost,testsa)
correct<- gwhat==testsa$classe
table(gwhat, testsa$classe)
gwhat<-predict(gbmfit,testsa)
correct<- gwhat==testsa$classe
table(gwhat, testsa$classe)
errb<- table(correct, testsa$classe)
err<-0 ;dia<- 0
for (i in 1: 5 ){err<- err+(errb[1,i]*errb[1,i]) ; dia<- dia+ errb[1,i]+errb[2,i]}
RMSE<-sqrt(err/dia)
RMSE
the<-read.csv("pml-training.csv")
ress<-predict(gbmfit,the)
ress
the<-read.csv("pml-testing.csv")
theme<-predict(gbmfit,the)
theme
pml_write_files = function(theme){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(theme)
theme
summary(gbmfit)
gbmfit$results
str(ft)
trda<-read.csv("pml-training.csv")
trains<-createDataPartition(y=trda$classe, p=0.7, list=FALSE)
trainsa<-trda[trains,]
testsa<-trda[-trains,]
#exclude NAs and keep only predictors variables. Make numerical.
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
ft<-nt[sapply(nt, function(nt) any(is.numeric(nt)))]
ftpure<-ft
ft$classe<-trainsa$classe
str(ft)
ft<-ft[,4:57]
ftpure<-ft
ft$classe<-trainsa$classe
str(ft)
ft<-ft[,5:57]
ftpure<-ft
ft$classe<-trainsa$classe
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
ft<-nt[sapply(nt, function(nt) any(is.numeric(nt)))]
ft<-ft[,5:57]
ftpure<-ft
ft$classe<-trainsa$classe
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
ft<-nt[sapply(nt, function(nt) any(is.numeric(nt)))]
ft<-ft[,5:57]
ftpure<-ft
ft$classe<-trainsa$classe
nt<-trainsa[sapply(trainsa, function(trainsa) !any(is.na(trainsa)))]
ft<-nt[sapply(nt, function(nt) any(is.numeric(nt)))]
ft<-ft[,5:56]
ftpure<-ft
ft$classe<-trainsa$classe
str(ft)
